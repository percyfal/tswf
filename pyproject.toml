[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
dirty = true
metadata = true
pattern  = "^(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?"

[tool.poetry-dynamic-versioning.substitution]
folders = [
    {path = "src"}
]

[tool.poetry-dynamic-versioning.files."src/tswf/_version.py"]
persistent-substitution = true
initial-content = """
# file generated by poetry
# don't change, don't track in version control
TYPE_CHECKING = False
if TYPE_CHECKING:
    from typing import Tuple, Union
    VERSION_TUPLE = Tuple[Union[int, str], ...]
else:
    VERSION_TUPLE = object

version: str
__version__: str
__version_tuple__: VERSION_TUPLE
version_tuple: VERSION_TUPLE

__version__ = "0.0.0"
__version_tuple__ = (0, 0, 0)

version = __version__
version_tuple = __version_tuple__
"""

[tool.poetry]
name = "tswf"
description = "Tree sequence workflow"
version = "0.0.0"
readme = "README.md"
keywords = ["bioinformatics"]
license = "MIT"
authors = ["Per Unneberg <per.unneberg@scilifelab.se>"]
homepage = "https://github.com/percyfal/tswf"
repository = "https://github.com/percyfal/tswf"
packages = [{include = "tswf", from="src"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Bio-Informatics"
]
include = [
    "src/tswf/_version.py",
    "src/tswf/workflow/Snakefile",
    "src/tswf/workflow/envs/*",
    "src/tswf/workflow/rules/*",
    "src/tswf/workflow/schemas/*",
    "src/tswf/tests/*",
    "*.json"
]

[tool.poetry.dependencies]
click = ">=8.0"
python = ">=3.10,<4.0"
jinja2 = "^3.1.4"
jsonschema = "^4.23.0"
cyvcf2 = "^0.31.1"
numpy = "^1.26.0,<2"
pandas = "^2.2.2"
pypandoc = "^1.13"
ruamel-yaml = "^0.18.6"
setuptools = "^72.1.0"
bokeh = "^3.5.1"
tsinfer = ">=0.4.0a1"
scipy = "^1.14.0"
matplotlib = "^3.9.0"
bio2zarr = "^0.1.1"

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
black = ">=21.10b0"
pytest = ">=6.2.5"
coverage = {extras = ["toml"], version = ">=6.2"}
darglint = ">=1.8.1"
flake8 = ">=4.0.1"
flake8-bandit = ">=2.1.2"
flake8-bugbear = ">=21.9.2"
flake8-docstrings = ">=1.6.0"
flake8-rst-docstrings = ">=0.2.5"
furo = ">=2021.11.12"
isort = ">=5.10.1"
mypy = ">=1.10.0"
pep8-naming = ">=0.12.1"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pyupgrade = ">=2.29.1"
typeguard = ">=2.13.3"
xdoctest = {extras = ["colors"], version = ">=0.15.10"}
pandas-stubs = "^2.2.2.240603"
tqdm-stubs = "^0.2.1"
types-jsonschema = "^4.23.0.20240712"

[tool.poetry.scripts]
tswf = "tswf.cli:cli"
tswf-tsinfer = "tswf.tools.tsinfer:main"
tswf-tsinfer-gnn = "tswf.tools.tsinfer_gnn:main"
tswf-tsinfer-make-samples = "tswf.tools.tsinfer_make_samples:main"
tswf-tsinfer-eda = "tswf.tools.viz.tsinfer_eda:main"
tswf-tsinfer-haplotype-gnn = "tswf.tools.tsinfer_haplotype_gnn:main"
tswf-get-ancestral-allele = "tswf.tools.get_ancestral_allele:main"
tswf-make-ancestral-sequence = "tswf.tools.make_ancestral_sequence:main"

[tool.snakefmt]
line_length = 90
include = '\.smk$|^Snakefile|\.py$'

# snakefmt passes these options on to black
[tool.black]
skip_string_normalization = true

[tool.isort]
profile = "black"
force_single_line = true
lines_after_imports = 2

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --doctest-modules"
pythonpath = [
    "src"
]
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.mypy]
strict = false
warn_unreachable = false
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
exclude = [
  'tests/conftest\.py$',
]

[[tool.mypy.overrides]]
  module = [
      "cyvcf2",
      "dotenv",
      "pyfaidx",
      "ruamel",
      "scipy",
      "snakemake",
      "snakemake.utils",
      "snakemake.logging",
      "tsinfer",
      "tskit"
  ]
  ignore_missing_imports = true
